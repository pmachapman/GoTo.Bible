@page "/"
@page "/{passage}"
@page "/{passage}/{primaryTranslation}"
@page "/{passage}/{primaryTranslation}/{secondaryTranslation}"
@using System.Text
@using Blazored.LocalStorage
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage
<style type="text/css">@(parameters.RenderCss() + Html.LoadingCodeCss)</style>
<nav class="navbar navbar-expand-lg sticky-top navbar-light bg-light">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <EditForm Model="@renderingParametersModel" class="form-inline" OnValidSubmit="@EditForm_OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="mt-2 mt-lg-0 mr-lg-2">
                <button type="button" class="btn btn-outline-secondary" disabled="@(!this.passage.PreviousPassage.IsValid)" @onclick="PreviousChapter_OnClick" title="Previous Chapter">
                    <span class="fa fa-play fa-flip-horizontal"></span> <span class="d-lg-none">Previous Chapter</span>
                </button>
                <button type="button" class="btn btn-outline-secondary" disabled="@(!this.passage.NextPassage.IsValid)" @onclick="NextChapter_OnClick" title="Next Chapter">
                    <span class="fa fa-play"></span> <span class="d-lg-none">Next Chapter</span>
                </button>
            </div>
            <div class="input-group mt-2 mt-lg-0 mr-lg-2">
                <InputText class="form-control" placeholder="Passage" aria-label="Passage" aria-describedby="button-go" @bind-Value="renderingParametersModel.Passage" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="submit" title="Go"><span class="fa fa-share"></span></button>
                </div>
            </div>
            <div class="input-group mt-2 mt-lg-0 mr-lg-2">
                @if (translations.Any())
                {
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="primary-translation">Primary</label>
                    </div>
                }
                <InputSelect class="custom-select" id="primary-translation" @oninput="PrimaryTranslation_OnInput" @bind-Value="renderingParametersModel.PrimaryTranslation">
                    @if (!translations.Any())
                    {
                        <option value="" selected>Loading...</option>
                    }
                    else
                    {
                        string lastLanguage = string.Empty;
                        foreach (Translation translation in translations)
                        {
                            if (translation.Language != lastLanguage)
                            {
                                if (!string.IsNullOrWhiteSpace(lastLanguage))
                                {
                                    @((MarkupString)"</optgroup>")
                                }
                                lastLanguage = translation.Language ?? "Other";
                                @((MarkupString)$"<optgroup label=\"{lastLanguage}\">")
                            }

                            <option value="@translation.Code">@translation.Name</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="input-group mt-2 mt-lg-0 mr-lg-2">
                @if (translations.Any())
                {
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="secondary-translation">Secondary</label>
                    </div>
                }
                <InputSelect class="custom-select" id="secondary-translation" @oninput="SecondaryTranslation_OnInput" @bind-Value="renderingParametersModel.SecondaryTranslation">
                    @if (!translations.Any())
                    {
                        <option value="" selected>Loading...</option>
                    }
                    else
                    {
                        <option value="" selected>None</option>
                        string lastLanguage = string.Empty;
                        foreach (Translation translation in translations)
                        {
                            if (translation.Language != lastLanguage)
                            {
                                if (!string.IsNullOrWhiteSpace(lastLanguage))
                                {
                                    @((MarkupString)"</optgroup>")
                                }
                                lastLanguage = translation.Language ?? "Other";
                                @((MarkupString)$"<optgroup label=\"{lastLanguage}\">")
                            }

                            <option value="@translation.Code">@translation.Name</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="mt-2 mt-lg-0 mr-lg-2" hidden="@string.IsNullOrWhiteSpace(this.renderingParametersModel.SecondaryTranslation)" title="Swap Primary and Secondary Translations">
                <button type="button" class="btn btn-outline-secondary" @onclick="SwapTranslations_OnClick">
                    <span class="fa fa-retweet"></span> <span class="d-lg-none">Swap Primary and Secondary Translations</span>
                </button>
            </div>
        </EditForm>
        <button class="btn btn-outline-secondary ml-lg-auto mt-2 mt-lg-0" data-toggle="modal" data-target="#settings-dialog">
            <span class="fa fa-cog" aria-hidden="true"></span><span class="d-lg-none d-xl-inline"> Settings</span>
        </button>
        <a class="btn btn-secondary ml-lg-2 d-lg-none d-xl-block mt-2 mt-lg-0" href="https://github.com/pmachapman/GoTo.Bible" target="_blank">
            <span class="fa fa-github" aria-hidden="true"></span> Contribute
        </a>
    </div>
</nav>

<div class="content px-4">
    @((MarkupString)(!string.IsNullOrWhiteSpace(this.passage.Content) ? this.passage.Content : Html.LoadingCodeBody))
</div>

<div class="modal" tabindex="-1" role="dialog" id="error-dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">An error has occurred</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>
                    This error has been logged on our server. Please log a ticket on our <a href="https://github.com/pmachapman/GoTo.Bible/issues" target="_blank">GitHub Issue Tracker</a>
                    detailing the URL in the address bar, and what you were doing at the time, so we can try and resolve this issue for you.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Ok</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="settings-dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Settings</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@renderingParametersModel">
                    <div class="custom-control custom-checkbox">
                        <InputCheckbox class="custom-control-input" id="interlinear-ignores-case" @oninput="InterlinearIgnoresCase_OnInput" @bind-Value="renderingParametersModel.InterlinearIgnoresCase" />
                        <label class="custom-control-label" for="interlinear-ignores-case">Ignore Case for Interlinear Comparisons</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                        <InputCheckbox class="custom-control-input" id="interlinear-ignores-diacritics" @oninput="InterlinearIgnoresDiacritics_OnInput" @bind-Value="renderingParametersModel.InterlinearIgnoresDiacritics" />
                        <label class="custom-control-label" for="interlinear-ignores-diacritics">Ignore Diacritics for Interlinear Comparisons</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                        <InputCheckbox class="custom-control-input" id="interlinear-ignores-punctation" @oninput="InterlinearIgnoresPunctuation_OnInput" @bind-Value="renderingParametersModel.InterlinearIgnoresPunctuation" />
                        <label class="custom-control-label" for="interlinear-ignores-punctation">Ignore Punctuation for Interlinear Comparisons</label>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Ok</button>
            </div>
        </div>
    </div>
</div>
@code {
    private const string RenderingParametersModelId = "RenderingParametersModel";
    private string defaultTranslation = "ESV";
    private bool firstLoad = true;
    private LanguageComparer languageComparer = new LanguageComparer();
    private RenderedPassage passage = new RenderedPassage();
    private RenderingParameters parameters = new RenderingParameters();
    private RenderingParametersModel renderingParametersModel = new RenderingParametersModel();
    private Translation[] translations = Array.Empty<Translation>();

    [Parameter]
    public string? Passage { get; set; }

    [Parameter]
    public string? PrimaryTranslation { get; set; }

    [Parameter]
    public string? SecondaryTranslation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Load the list of translations
        this.translations = (await this.Http.GetFromJsonAsync<Translation[]>("Translations"))?.Where(t => !t.Commentary)?.OrderBy(t => t.Language, languageComparer)?.ThenBy(t => t.Name)?.ToArray() ?? Array.Empty<Translation>();

        // If we don't have the ESV, default to the NET
        if (!this.translations.Any(t => t.Code == "ESV"))
        {
            this.defaultTranslation = "NET";
        }

        // Get the local copy of the rendering parameters
        RenderingParametersModel? localRenderingParameters = await this.LocalStorage.GetItemAsync<RenderingParametersModel?>(RenderingParametersModelId);

        // Get the passage and translation
        if (!string.IsNullOrWhiteSpace(this.Passage))
        {
            this.renderingParametersModel.Passage = this.Passage.DecodePassageFromUrl();
        }
        else if (!string.IsNullOrWhiteSpace(localRenderingParameters?.Passage))
        {
            this.renderingParametersModel.Passage = localRenderingParameters.Passage;
        }
        else
        {
            this.renderingParametersModel.Passage = Default.Passage;
        }

        if (!string.IsNullOrWhiteSpace(this.PrimaryTranslation))
        {
            this.renderingParametersModel.PrimaryTranslation = this.PrimaryTranslation.DecodePassageFromUrl();
        }
        else if (!string.IsNullOrWhiteSpace(localRenderingParameters?.PrimaryTranslation))
        {
            this.renderingParametersModel.PrimaryTranslation = localRenderingParameters.PrimaryTranslation;

            // If we are loading the primary translation from local, we should load the secondary translation too
            if (!string.IsNullOrWhiteSpace(localRenderingParameters.SecondaryTranslation))
            {
                this.renderingParametersModel.SecondaryTranslation = localRenderingParameters.SecondaryTranslation;
            }
        }
        else
        {
            this.renderingParametersModel.PrimaryTranslation = this.defaultTranslation;
        }

        if (!string.IsNullOrWhiteSpace(this.SecondaryTranslation))
        {
            this.renderingParametersModel.SecondaryTranslation = this.SecondaryTranslation.DecodePassageFromUrl();
        }

        // Load the settings
        this.renderingParametersModel.InterlinearIgnoresCase = localRenderingParameters?.InterlinearIgnoresCase ?? false;
        this.renderingParametersModel.InterlinearIgnoresDiacritics = localRenderingParameters?.InterlinearIgnoresDiacritics ?? false;
        this.renderingParametersModel.InterlinearIgnoresPunctuation = localRenderingParameters?.InterlinearIgnoresPunctuation ?? false;

        // Call the base implementation
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Get the passage and translation
        bool parametersAreEmpty = true;
        if (!string.IsNullOrWhiteSpace(this.Passage))
        {
            this.renderingParametersModel.Passage = this.Passage.DecodePassageFromUrl();
            parametersAreEmpty = false;
        }

        if (!string.IsNullOrWhiteSpace(this.PrimaryTranslation))
        {
            this.renderingParametersModel.PrimaryTranslation = this.PrimaryTranslation.DecodePassageFromUrl();
            parametersAreEmpty = false;
        }

        if (!string.IsNullOrWhiteSpace(this.SecondaryTranslation))
        {
            this.renderingParametersModel.SecondaryTranslation = this.SecondaryTranslation.DecodePassageFromUrl();
            parametersAreEmpty = false;
        }

        // Show the passage - only update the URL if this is the first load, and the parameters are empty
        await this.ShowPassageAsync(firstLoad && parametersAreEmpty);

        // Page has first loaded
        this.firstLoad = false;

        // Call the base implementation
        await base.OnParametersSetAsync();
    }

    private async Task EditForm_OnValidSubmit(EditContext editContext)
    {
        await this.ShowPassageAsync(true);
        await this.JsRuntime.InvokeAsync<string>("closeMenu", "navbarNav");
    }

    private async Task GetPassageAsync()
    {
        HttpResponseMessage response = await this.Http.PostAsJsonAsync("RenderPassage", this.parameters);
        if (response.IsSuccessStatusCode)
        {
            this.passage = await response.Content.ReadFromJsonAsync<RenderedPassage>() ?? new RenderedPassage();
        }
        else
        {
            await this.JsRuntime.InvokeAsync<string>("showDialog", "error-dialog");
            this.passage = new RenderedPassage();
        }
    }

    private async Task InterlinearIgnoresCase_OnInput(ChangeEventArgs e)
    {
        this.renderingParametersModel.InterlinearIgnoresCase = e.Value as bool? ?? false;
        await this.ShowPassageAsync(true);
    }

    private async Task InterlinearIgnoresDiacritics_OnInput(ChangeEventArgs e)
    {
        this.renderingParametersModel.InterlinearIgnoresDiacritics = e.Value as bool? ?? false;
        await this.ShowPassageAsync(true);
    }

    private async Task InterlinearIgnoresPunctuation_OnInput(ChangeEventArgs e)
    {
        this.renderingParametersModel.InterlinearIgnoresPunctuation = e.Value as bool? ?? false;
        await this.ShowPassageAsync(true);
    }

    private async Task NextChapter_OnClick()
    {
        if (this.passage.NextPassage.IsValid)
        {
            this.renderingParametersModel.Passage = this.passage.NextPassage.Start;
            await this.ShowPassageAsync(true);
            await this.JsRuntime.InvokeAsync<string>("closeMenu", "navbarNav");
        }
    }

    private async Task PreviousChapter_OnClick()
    {
        if (this.passage.PreviousPassage.IsValid)
        {
            this.renderingParametersModel.Passage = this.passage.PreviousPassage.Start;
            await this.ShowPassageAsync(true);
            await this.JsRuntime.InvokeAsync<string>("closeMenu", "navbarNav");
        }
    }

    private async Task PrimaryTranslation_OnInput(ChangeEventArgs e)
    {
        this.renderingParametersModel.PrimaryTranslation = e.Value?.ToString() ?? string.Empty;
        await this.ShowPassageAsync(true);
    }

    private async Task SecondaryTranslation_OnInput(ChangeEventArgs e)
    {
        this.renderingParametersModel.SecondaryTranslation = e.Value?.ToString() ?? string.Empty;
        await this.ShowPassageAsync(true);
    }

    private async Task SwapTranslations_OnClick()
    {
        string? secondaryTranslation = this.renderingParametersModel.SecondaryTranslation;
        if (!string.IsNullOrWhiteSpace(secondaryTranslation))
        {
            this.renderingParametersModel.SecondaryTranslation = this.renderingParametersModel.PrimaryTranslation;
            this.renderingParametersModel.PrimaryTranslation = secondaryTranslation;
            await this.ShowPassageAsync(true);
        }
    }

    private async Task ShowPassageAsync(bool updateUrl)
    {
        this.UpdateParameters();

        // Ensure we have a primary translation
        if (string.IsNullOrWhiteSpace(this.parameters.PrimaryTranslation))
        {
            this.renderingParametersModel.PrimaryTranslation = this.defaultTranslation;
            this.UpdateParameters();
        }

        if (updateUrl)
        {
            await this.UpdateUrlAsync();
        }

        await this.GetPassageAsync();
        await this.LocalStorage.SetItemAsync<RenderingParametersModel>(RenderingParametersModelId, this.renderingParametersModel);
    }

    /// <summary>
    /// Updates the <see cref="RenderingParameters"/> from the <see cref="RenderingParametersModel"/>.
    /// </summary>
    private void UpdateParameters()
    {
        this.passage.Content = string.Empty;
        this.parameters.InterlinearIgnoresCase = this.renderingParametersModel.InterlinearIgnoresCase;
        this.parameters.InterlinearIgnoresDiacritics = this.renderingParametersModel.InterlinearIgnoresDiacritics;
        this.parameters.InterlinearIgnoresPunctuation = this.renderingParametersModel.InterlinearIgnoresPunctuation;
        this.parameters.PassageReference = this.renderingParametersModel.Passage.AsPassageReference();
        this.parameters.PrimaryProvider = string.Empty;
        this.parameters.PrimaryTranslation = string.Empty;
        this.parameters.SecondaryProvider = null;
        this.parameters.SecondaryTranslation = null;
        foreach (Translation translation in this.translations)
        {
            // See if both passages have been rendered
            if (!string.IsNullOrWhiteSpace(this.parameters.PrimaryTranslation) && !string.IsNullOrWhiteSpace(this.parameters.SecondaryTranslation))
            {
                break;
            }
            else if (string.Equals(translation.Code, this.renderingParametersModel.PrimaryTranslation, StringComparison.OrdinalIgnoreCase))
            {
                this.parameters.PrimaryProvider = translation.Provider;
                this.parameters.PrimaryTranslation = translation.Code;
                this.renderingParametersModel.PrimaryTranslation = translation.Code;

                // No secondary translation specified, or it has already been rendered
                if (string.IsNullOrWhiteSpace(this.renderingParametersModel.SecondaryTranslation) || !string.IsNullOrWhiteSpace(this.parameters.SecondaryTranslation))
                {
                    break;
                }
            }
            else if (string.Equals(translation.Code, this.renderingParametersModel.SecondaryTranslation, StringComparison.OrdinalIgnoreCase))
            {
                this.parameters.SecondaryProvider = translation.Provider;
                this.parameters.SecondaryTranslation = translation.Code;
                this.renderingParametersModel.SecondaryTranslation = translation.Code;

                // No primary translation specified, or it has already been rendered
                if (string.IsNullOrWhiteSpace(this.renderingParametersModel.PrimaryTranslation) || !string.IsNullOrWhiteSpace(this.parameters.PrimaryTranslation))
                {
                    break;
                }
            }
        }
    }

    /// <summary>
    /// Updates the web browser URL to reflect the current passage.
    /// </summary>
    /// <returns>The asynchronous task.</returns>
    private async Task UpdateUrlAsync()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/");
        string passage = this.parameters.PassageReference.Start.EncodePassageForUrl();
        if (!string.IsNullOrWhiteSpace(passage))
        {
            sb.Append(passage);

            sb.Append("/");
            sb.Append(Uri.EscapeDataString(this.parameters.PrimaryTranslation));
            if (!string.IsNullOrWhiteSpace(this.parameters.SecondaryTranslation))
            {
                sb.Append("/");
                sb.Append(Uri.EscapeDataString(this.parameters.SecondaryTranslation));
            }
        }

        await this.JsRuntime.InvokeAsync<string>("changeUrl", sb.ToString());
    }
}
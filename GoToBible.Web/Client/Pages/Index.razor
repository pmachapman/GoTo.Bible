@page "/"
@inject HttpClient Http
<style type="text/css">@(parameters.RenderCss() + Html.LoadingCodeCss)</style>
<nav class="navbar navbar-expand-lg sticky-top navbar-light bg-light">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <EditForm Model="@renderingParametersModel" class="form-inline" OnValidSubmit="@ShowPassageAsync">
            <DataAnnotationsValidator />
            <div class="mt-2 mt-lg-0 mr-lg-2">
                <button type="button" class="btn btn-outline-secondary" disabled="@(!this.passage.PreviousPassage.IsValid)" @onclick="PreviousChapter_OnClick">
                    <span class="fa fa-play fa-flip-horizontal"></span> <span class="d-lg-none">Previous Chapter</span>
                </button>
                <button type="button" class="btn btn-outline-secondary" disabled="@(!this.passage.NextPassage.IsValid)" @onclick="NextChapter_OnClick">
                    <span class="fa fa-play"></span> <span class="d-lg-none">Next Chapter</span>
                </button>
            </div>
            <div class="input-group mt-2 mt-lg-0 mr-lg-2">
                <InputText class="form-control" placeholder="Passage" aria-label="Passage" aria-describedby="button-go" @bind-Value="renderingParametersModel.Passage" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="submit" id="button-go"><span class="fa fa-share"></span></button>
                </div>
            </div>
            <div class="input-group mt-2 mt-lg-0 mr-lg-2">
                @if (translations.Any())
                {
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="primary-translation">Primary</label>
                    </div>
                }
                <InputSelect class="custom-select" id="primary-translation" @oninput="PrimaryTranslation_OnInput" @bind-Value="renderingParametersModel.PrimaryTranslation">
                    @if (!translations.Any())
                    {
                        <option value="" selected>Loading...</option>
                    }
                    else
                    {
                        string lastLanguage = string.Empty;
                        foreach (Translation translation in translations.Where(t => !t.Commentary).OrderBy(t => t.Language, languageComparer).ThenBy(t => t.Name))
                        {
                            if (translation.Language != lastLanguage)
                            {
                                if (!string.IsNullOrWhiteSpace(lastLanguage))
                                {
                                    @((MarkupString)"</optgroup>")
                                }
                                lastLanguage = translation.Language ?? "Other";
                                @((MarkupString)$"<optgroup label=\"{lastLanguage}\">")
                            }

                            <option value="@translation.Code">@translation.UniqueName(this.translations)</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="input-group mt-2 mt-lg-0 mr-lg-2">
                @if (translations.Any())
                {
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="secondary-translation">Secondary</label>
                    </div>
                }
                <InputSelect class="custom-select" id="secondary-translation" @oninput="SecondaryTranslation_OnInput" @bind-Value="renderingParametersModel.SecondaryTranslation">
                    @if (!translations.Any())
                    {
                        <option value="" selected>Loading...</option>
                    }
                    else
                    {
                        <option value="" selected>None</option>
                        string lastLanguage = string.Empty;
                        foreach (Translation translation in translations.Where(t => !t.Commentary).OrderBy(t => t.Language, languageComparer).ThenBy(t => t.Name))
                        {
                            if (translation.Language != lastLanguage)
                            {
                                if (!string.IsNullOrWhiteSpace(lastLanguage))
                                {
                                    @((MarkupString)"</optgroup>")
                                }
                                lastLanguage = translation.Language ?? "Other";
                                @((MarkupString)$"<optgroup label=\"{lastLanguage}\">")
                            }

                            <option value="@translation.Code">@translation.UniqueName(this.translations)</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="mt-2 mt-lg-0 mr-lg-2" hidden="@string.IsNullOrWhiteSpace(this.renderingParametersModel.SecondaryTranslation)">
                <button type="button" class="btn btn-outline-secondary" @onclick="SwapTranslations_OnClick">
                    <span class="fa fa-retweet"></span> <span class="d-lg-none">Swap Primary and Secondary Translations</span>
                </button>
            </div>
        </EditForm>
        <NavLink class="btn btn-secondary ml-lg-auto d-lg-none d-xl-block" href="https://github.com/pmachapman/GoTo.Bible" target="_blank">
            <span class="fa fa-github" aria-hidden="true"></span> Contribute
        </NavLink>
    </div>
</nav>

<div class="content px-4">
    @((MarkupString)(!string.IsNullOrWhiteSpace(this.passage.Content) ? this.passage.Content : Html.LoadingCodeBody))
</div>
@code {
    private LanguageComparer languageComparer = new LanguageComparer();
    private RenderedPassage passage = new RenderedPassage();
    private RenderingParameters parameters = new RenderingParameters();
    private RenderingParametersModel renderingParametersModel = new RenderingParametersModel();
    private Translation[] translations = Array.Empty<Translation>();

    protected override async Task OnInitializedAsync()
    {
        this.translations = await this.Http.GetFromJsonAsync<Translation[]>("Translations") ?? Array.Empty<Translation>();

        // Set defaults
        this.renderingParametersModel.Passage = Default.Passage;
        this.parameters.PassageReference = Default.Passage.AsPassageReference();
        this.renderingParametersModel.PrimaryTranslation = "ESV";
        this.parameters.PrimaryTranslation = "ESV";
        this.parameters.PrimaryProvider = "EsvBible";
        await this.GetPassageAsync();
    }

    private async Task GetPassageAsync()
    {
        HttpResponseMessage response = await this.Http.PostAsJsonAsync("RenderPassage", this.parameters);
        if (response.IsSuccessStatusCode)
        {
            this.passage = await response.Content.ReadFromJsonAsync<RenderedPassage>() ?? new RenderedPassage();
        }
        else
        {
            this.passage = new RenderedPassage();
        }
    }

    private async Task NextChapter_OnClick()
    {
        if (this.passage.NextPassage.IsValid)
        {
            this.renderingParametersModel.Passage = this.passage.NextPassage.Start;
            await this.ShowPassageAsync();
        }
    }

    private async Task PreviousChapter_OnClick()
    {
        if (this.passage.PreviousPassage.IsValid)
        {
            this.renderingParametersModel.Passage = this.passage.PreviousPassage.Start;
            await this.ShowPassageAsync();
        }
    }

    private async Task PrimaryTranslation_OnInput(ChangeEventArgs e)
    {
        this.renderingParametersModel.PrimaryTranslation = e.Value?.ToString() ?? string.Empty;
        await this.ShowPassageAsync();
    }

    private async Task SecondaryTranslation_OnInput(ChangeEventArgs e)
    {
        this.renderingParametersModel.SecondaryTranslation = e.Value?.ToString() ?? string.Empty;
        await this.ShowPassageAsync();
    }

    private async Task SwapTranslations_OnClick()
    {
        string? secondaryTranslation = this.renderingParametersModel.SecondaryTranslation;
        if (!string.IsNullOrWhiteSpace(secondaryTranslation))
        {
            this.renderingParametersModel.SecondaryTranslation = this.renderingParametersModel.PrimaryTranslation;
            this.renderingParametersModel.PrimaryTranslation = secondaryTranslation;
            await this.ShowPassageAsync();
        }
    }

    private async Task ShowPassageAsync()
    {
        this.UpdateParameters();
        await this.GetPassageAsync();
    }

    /// <summary>
    /// Updates the <see cref="RenderingParameters"/> from the <see cref="RenderingParametersModel"/>.
    /// </summary>
    private void UpdateParameters()
    {
        this.passage.Content = string.Empty;
        this.parameters.PassageReference = this.renderingParametersModel.Passage.AsPassageReference();
        this.parameters.PrimaryProvider = string.Empty;
        this.parameters.PrimaryTranslation = string.Empty;
        this.parameters.SecondaryProvider = null;
        this.parameters.SecondaryTranslation = null;
        foreach (Translation translation in this.translations)
        {
            // See if both passages have been rendered
            if (!string.IsNullOrWhiteSpace(this.parameters.PrimaryTranslation) && !string.IsNullOrWhiteSpace(this.parameters.SecondaryTranslation))
            {
                break;
            }
            else if (translation.Code == this.renderingParametersModel.PrimaryTranslation)
            {
                this.parameters.PrimaryProvider = translation.Provider;
                this.parameters.PrimaryTranslation = translation.Code;

                // No secondary translation specified, or it has already been rendered
                if (string.IsNullOrWhiteSpace(this.renderingParametersModel.SecondaryTranslation) || !string.IsNullOrWhiteSpace(this.parameters.SecondaryTranslation))
                {
                    break;
                }
            }
            else if (translation.Code == this.renderingParametersModel.SecondaryTranslation)
            {
                this.parameters.SecondaryProvider = translation.Provider;
                this.parameters.SecondaryTranslation = translation.Code;

                // No primary translation specified, or it has already been rendered
                if (string.IsNullOrWhiteSpace(this.renderingParametersModel.PrimaryTranslation) || !string.IsNullOrWhiteSpace(this.parameters.PrimaryTranslation))
                {
                    break;
                }
            }
        }
    }
}